## OLD Regular way to do thi
#from rsf.proj import *

## Import the cluster extensions
from rsf.mycluster import *

## Define cluster commands
Cluster(name='m8r_ws',email='username@mines.edu',time=60,ppn=24,nodetype='geop')

## Import python module
import math

# Define parameters
par = {
'dx':0.005,'dz':0.005,
'minx':35,'maxx':45,'minz':0,'maxz':6,
'f':15,'nt':6000,'dt':0.0005,
'sx':40,'sz':0.01,'rz':0.00625,
'jsnap':100,'jdata':10
}
par['kt'] = 1.2/(par['dt']*par['f'])
par['nz'] = par['maxz']/par['dz']
par['nx'] = (par['maxx']-par['minx'])/par['dx']
velsegy = 'vel_z6.25m_x12.5m_exact.segy'
densegy = 'density_z6.25m_x12.5m.segy'

# Grab the data from the internet 
#Fetch(velsegy+'.gz',dir='2004_BP_Vel_Benchmark',
#server='ftp://software.seg.org',top='pub/datasets/2D')
#Fetch(densegy+'.gz',dir='2004_BP_Vel_Benchmark',
#server='ftp://software.seg.org',top='pub/datasets/2D')

# Prepare the velocity and density files
Flow('BPvelocity.segy',velsegy+'.gz','gzip -d')
Flow('BPdensity.segy',densegy+'.gz','gzip -d')
Flow('BPvelocity','BPvelocity.segy','segyread | put d1=0.00625 label1="Z" unit1="km" d2=0.0125 label2="X" unit2="km"')
Flow('BPdensity','BPdensity.segy','segyread | put d1=0.00625 label1="Z" unit1="km" d2=0.0125 label2="X" unit2="km" ' %par)

# Create a plot of the velocity model
Result('velocity_plot','BPvelocity','grey color=j mean=y scalebar=y title="BP Velocity Model"')

# Subset the velocity model
Flow('velocity','BPvelocity','window max1=%(maxz)d max2=%(maxx)g min2=%(minx)g | add scale=0.001 |transp | sinc n1=%(nx)d d1=%(dx)g o1=%(minx)g | transp' %par)

# Subset the density model
Flow('density','BPdensity','window max1=%(maxz)d max2=%(maxx)g min2=%(minx)g | add scale=0.001 |transp | sinc n1=%(nx)d d1=%(dx)g o1=%(minx)g | transp' %par)

# Plot a subset of the velocity model
Result('velocity_plot_subset','velocity','grey color=j mean=y scalebar=y title="BP Velocity Model subset"')
Result('density_plot_subset','density','grey color=j mean=y scalebar=y title="BP Density Model subset"')

# Create the ricker wavelet
#Flow('wav',None,'spike n1=%(nt)d d1=%(dt)g o1=0 k1=%(kt)d | ricker1 frequency=%(f)d ' %par )
Flow('wav',None,'spike n1=%(nt)d d1=%(dt)g o1=0 k1=%(kt)d | ricker1 frequency=%(f)d' % par)
Result('plot_wav','wav','window min1=0.07 max1=0.09 | graph')
Flow('acousticwavelet','wav','transp plane=12 | pad n1=2')

# Put the source and receiver information together
Flow('sx',None,'math n1=1 output=%(sx)g' %par)
Flow('sz',None,'math n1=1 output=%(sz)g' %par)
Flow('source','sx sz','cat axis=1 ${SOURCES[1]}')
Flow('rx',None,'math n1=%(nx)d d1=%(dx)g o1=%(minx)g output=x1' %par)
Flow('rz',None,'math n1=%(nx)d d1=%(dx)g o1=%(minx)g output=%(rz)g' %par)
Flow('receivers','rx rz','cat axis=2 ${SOURCES[1]} | transp')

# Acoustic wavefield modelling
Flow('arecfield awavefield','acousticwavelet density receivers source velocity','''
	awefd2d
	den=${SOURCES[1]}
	rec=${SOURCES[2]}
	sou=${SOURCES[3]}
	vel=${SOURCES[4]}
	wfl=${TARGETS[1]}
	verb=y dabc=y snap=y jsnap=%(jsnap)d jdata=%(jdata)d free=y
	''' %par)

# Plot the acoustic wavefield results
Result("acoustic_shot_gather","arecfield",'transp plane=12 | grey mean=y gainpanel=a title="Acoustic reciever data"')
Result("acoustic_wavefield_movie","awavefield",'grey gainpanel=a title="Acoustic wavefield"')

# Elastic modelling
Flow('elasticwavelet','wav','put n2=1 n3=1 | transp plane=13 | pad n2=2')

# Create C11
Flow("C11","velocity density",'math dens=${SOURCES[1]} vp=${SOURCES[0]} output=dens*vp*vp')
Flow("C33","C11",'cp')
Flow("vp","velocity",'cp')

# Create a Vs model assuming a Poisson solid
par['sqrt3']=math.sqrt(3.0)
Flow("vs","velocity",'math vel=${SOURCES[0]} output=vel/%(sqrt3)f' % par)
Flow("C55","density vs",'math dens=${SOURCES[0]} vs=${SOURCES[1]} output=dens*vs*vs')
Flow("C13","C11 C55",'math c11=${SOURCES[0]} c55=${SOURCES[1]} output=c11-2*c55')
Flow("ccc","C11 C33 C55 C13",'cat axis=3 ${SOURCES[1:4]}')

# Do the elastic modelling
Flow('erecfield ewavefield','elasticwavelet density receivers source ccc',
	'''
	ewefd2d
	den=${SOURCES[1]}
	rec=${SOURCES[2]}
	sou=${SOURCES[3]}
	ccc=${SOURCES[4]}
	wfl=${TARGETS[1]}
	dabc=y snap=y verb=y jsnap=%(jsnap)d jdata=%(jdata)d
	ssou=y nb=20 nbell=11
	''' %par)

# Separate components
Flow('ewfldZ','ewavefield','window n3=1 f3=0 min2=%(minx)g max2=%(maxx)g max1=%(maxz)g min1=%(minz)g' % par)
Flow('ewfldX','ewavefield','window n3=1 f3=1 min2=%(minx)g max2=%(maxx)g max1=%(maxz)g min1=%(minz)g' % par)

# Plot components of the Elastic wavefield
Result("ewfld_z_movie","ewfldZ",'grey gainpanel=a title="Elastic wavefield, Z component"')
Result("ewfld_x_movie","ewfldX",'grey gainpanel=a title="Elastic wavefield, X component"')

End()
